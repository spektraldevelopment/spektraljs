{
    "dom" : [
        {
            "category" : ["DOM, selector"],
            "title" : "getElement()",
            "description" : "Returns an element from the DOM.",
            "code" : "Spektral.getElement(element, index);",
            "params" : [
                {"element (required, expects: String)" : "You can search for an element by it's id, class, or tag name. If multiple instances of the element are found (ex. elements share the same class or tag name), will return a nodeList of elements."},
                {"index (optional, expects: Number)" : "Use this to target an element that shares the same class or tag name with other elements. Ex. The third list item in an unordered list."}
            ],
            "returns" : "Element",
            "dependencies" : "isHTMLElement(), isHTMLID(), isHTMLName(), query(), throwError(), getType(), log(), listArrayElements()",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["DOM, selector"],
            "title" : "query()",
            "description" : "Uses querySelectorAll to locate and return an element.",
            "code" : "Spektral.query(element)",
            "params" : [
                {"element (required, expects: String)" : "The element you wish to locate."}
            ],
            "returns" : "Element",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["event, utils"],
            "title" : "getTarget()",
            "description" : "Returns the target element that is attached to the triggered event.",
            "code" : "Spektral.getTarget(element);",
            "params" : [
                {"evt (required, expects: Returned event value)" : "The returned value event from the function assigned to the event."}
            ],
            "returns" : "Element",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["event, utils"],
            "title" : "getTargetID()",
            "description" : "Returns the id of the element, if it has one.",
            "code" : "Spektral.getTargetID(element)",
            "params" : [
                {"element (required, expects: Element)" : "The element you wish to get the id from."}
            ],
            "returns" : "String",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["DOM"],
            "title" : "createNewElement()",
            "description" : "Created a new element and adds it to the parent of your choosing.",
            "code" : "Spektral.createNewElement(element, id, parent);",
            "params" : [
                {"element (required, expects: String)" : "Accepts an valid HTML element."},
                {"id (optional, expects: String)" : "If not defined, an id will not be assigned to element."},
                {"parent (optional, expects: String or Element)" : "If not defined, will add new element to the body element."}
            ],
            "returns" : "Element",
            "dependencies" : "getElement(), getType(), throwError()",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["DOM"],
            "title" : "moveToAfter()",
            "description" : "Moves an element to after another element in the same parent node.",
            "code" : "Spektral.moveToAfter(element, targetElement);",
            "params" : [
                {"element (required, expects: Element)" : "The element you wish to move."},
                {"targetElement (required, expects: Element)" : "The target element in the same parent node."}
            ],
            "returns" : "Nothing",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["DOM"],
            "title" : "moveToBefore()",
            "description" : "Moves an element to before another element in the same parent node.",
            "code" : "Spektral.moveToBefore(element, targetElement);",
            "params" : [
                {"element (required, expects: Element)" : "The element you wish to move."},
                {"targetElement (required, expects: Element)" : "The target element in the same parent node."}
            ],
            "returns" : "Nothing",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["DOM"],
            "title" : "removeElement()",
            "description" : "Removes an element from the DOM.",
            "code" : "Spektral.removeElement(element);",
            "params" : [
                {"element (required, expects: Element)" : "The element you want to remove from the DOM."}
            ],
            "returns" : "Nothing",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["DOM"],
            "title" : "clearAllChildren()",
            "description" : "Clears all child nodes from a parent node.",
            "code" : "Spektral.clearAllChildren(parent);",
            "params" : [
                {"parent (required, expects: Element)" : "The parent you want to clear of all children."}
            ],
            "returns" : "Nothing",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["DOM"],
            "title" : "createSetAttribute()",
            "description" : "Adds any valid attribute to an element.",
            "code" : "Spektral.createSetAttribute(element, attribute, value);",
            "params" : [
                {"element (required, expects: Element)" : "The element you want to add the attribute to."},
                {"attribute (required, expects: String)" : "The attribute you wish to set."},
                {"value (required, expects: String)" : "The value you want to assign to the new attribute."}
            ],
            "returns" : "Nothing",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["DOM"],
            "title" : "retrieveAttribute()",
            "description" : "Retrieves an attribute from an element.",
            "code" : "Spektral.retrieveAttribute(element, attribute);",
            "params" : [
                {"element (required, expects: Element)" : "The element you want to retrieve the attribute from."},
                {"attribute (required, expects: String)" : "The name of the attribute."}
            ],
            "returns" : "String",
            "dependencies" : "getNodeAttributes(), throwError()",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["DOM"],
            "title" : "destroyAttribute()",
            "description" : "Remove an attribute from an element.",
            "code" : "Spektral.destroyAttribute(element, attribute);",
            "params" : [
                {"element (required, expects: Element)" : "The element you want to remove the attribute from."},
                {"attribute (required, expects: String)" : "The attribute you want to remove."}
            ],
            "returns" : "Nothing",
            "dependencies" : "throwError()",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["DOM, string"],
            "title" : "getTextContent()",
            "description" : "Returns the inner text inside an element.",
            "code" : "Spektral.getTextContent(element);",
            "params" : [
                {"element (required, expects: Element)" : "The element you wish to retrieve the text from."}
            ],
            "returns" : "String",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["DOM"],
            "title" : "getNodeAttributes()",
            "description" : "Returns an object with all the attribute of a node.",
            "code" : "Spektral.getNodeAttributes(element);",
            "params" : [
                {"element (required, expects: Element)" : "The element you want to get all attributes from."}
            ],
            "returns" : "Object",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["DOM"],
            "title" : "checkForAttribute() - Currently Not Available",
            "description" : "Checks if an attribute exists within an element.",
            "code" : "Spektral.checkForAttribute(element, attribute);",
            "params" : [
                {"element (required, expects: Element)" : "The element you want to check for the attribute."},
                {"attribute (required, expects: String)" : "The attribute you want to check for."}
            ],
            "returns" : "Nothing",
            "dependencies" : "None",
            "compatibility" : "Not Available."
        },
        {
            "category" : ["DOM, array"],
            "title" : "listNodeAttributes()",
            "description" : "Returns an array of attributes of a node as an Array.",
            "code" : "Spektral.listNodeAttributes(node);",
            "params" : [
                {"node (required, expects: Element or XML node)" : "The node you want to get attributes from."}
            ],
            "returns" : "Array",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["DOM, array"],
            "title" : "listElements()",
            "description" : "Returns an array with all the elements currently in use in the DOM.",
            "code" : "Spektral.listElements(attribute);",
            "params" : [
                {"attribute (optional, expects: String)" : "You can pass in either \"id\" or \"name\" to retrieve elements only by those attributes."}
            ],
            "returns" : "Array",
            "dependencies" : "convertCase()",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["array, utils"],
            "title" : "getChildNodes()",
            "description" : "Retrieves the children of a node.",
            "code" : "Spektral.getChildNodes(parent);",
            "params" : [
                {"parent (required, expects: Element)" : "The element you wish to get the children of."}
            ],
            "returns" : "Array",
            "dependencies" : "isElement()",
            "compatibility" : "Currently in testing."
        }
    ],

    "event" : [
        {
            "category" : ["event"],
            "title" : "attachEventListener()",
            "description" : "Attaches an event listener to any element. If a mouse event, the hand (pointer) cursor is automatically applied.",
            "code" : "Spektral.attachEventListener(eventTarget, eventType, eventHandler);",
            "params" : [
                { "eventTarget (required, expects: Element or String)" : "Will use getElement() if string." },
                { "eventType (required, expects: String)" : "Any valid event type, ex. 'click', 'complete', 'load'. Also accepts custom event types." },
                { "eventHandler (required, expects: Function)" : "The function you wish to use to handle the event when it is fired." }
            ],
            "returns" : "Nothing",
            "dependencies" : "getType(), getElement(), useHandCursor()",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["event"],
            "title" : "detachEventListener()",
            "description" : "Detaches an event listener from any element. If a mouse event, the hand cursor is automatically set back to default.",
            "code" : "Spektral.detachEventListener(eventTarget, eventType, eventHandler);",
            "params" : [
                { "eventTarget (required, expects: Element or String)" : "Will use getElement() if string." },
                { "eventType (required), expects: String)" : "Any valid event type, ex. 'click', 'complete', 'load'. Also accepts custom event types." },
                { "eventHandler (required, expects: Function)" : "The function that was assign to the event." }
            ],
            "returns" : "Nothing",
            "dependencies" : "getType(), getElement(), useDefaultCursor()",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["event"],
            "title" : "createEvent()",
            "description" : "Creates a custom event.",
            "code" : "Spektral.createEvent(eventName, details, bub, can);",
            "params" : [
                {"eventName (required, expects: String)" : "The name of the custom event you wish to create."},
                {"details (optional, expects: Object)" : "Allows you to pass custom properties to the event."},
                {"bub (optional, expects: Boolean, default: true)" : "Determines whether event can bubble."},
                {"can (optional, expects: Boolean, default: true)" : "Determines whether event can be canceled."}
            ],
            "returns" : "Event",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["event"],
            "title" : "cancelEvent()",
            "description" : "Prevents default action triggered by event.",
            "code" : "Spektral.cancelEvent(evt);",
            "params" : [
                {"evt (required, expects: Returned event value)" : "The returned value event from the function assigned to the event."}
            ],
            "returns" : "Nothing",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["event"],
            "title" : "cancelPropagation()",
            "description" : "Stops the event from bubbling up to parent elements.",
            "code" : "Spektral.stopPropagation(evt);",
            "params" : [
                {"evt (required, expects: Returned event value)" : "The returned value event from the function assigned to the event."}
            ],
            "returns" : "Nothing",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        }
    ],
    "mouse" : [
        {
            "category" : ["event, utils"],
            "title" : "getMousePos()",
            "description" : "Returns the mouses X/Y co-ordinates either with an element or window.",
            "code" : "Spektral.getMousePos(evt);",
            "params" : [
                {"evt (required, expects: Returned event value)" : "The returned value event from the function assigned to the event."}
            ],
            "returns" : "Object",
            "dependencies" : "throwError(), getTarget(), getPos()",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["style"],
            "title" : "useHandCursor()",
            "description" : "Sets cursor style to hand (pointer).",
            "code" : "Spektral.useHandCursor(element, cursorType);",
            "params" : [
                {"element (required, expects: Element)" : "The element you want to apply the hand cursor to."},
                {"cursorType (optional, expects: String. default: \"pointer\")" : "The type of hand cursor you want to apply. Besides \"pointer\" you may also use any valid cursor style you want."}
            ],
            "returns" : "Nothing",
            "dependencies" : "getType(), appendStyle()",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["style"],
            "title" : "useDefaultCursor()",
            "description" : "Simply sets the cursor to the browsers default style.",
            "code" : "Spektral.useDefaultCursor(element);",
            "params" : [
                {"element (required, expects: Element)" : "The element you want to reset to the default cursor."}
            ],
            "returns" : "Nothing",
            "dependencies" : "appendStyle()",
            "compatibility" : "Currently in testing."
        }
    ],
    "number" : [

    ],
    "string" : [

    ],
    "object" : [

    ],
    "style" : [

    ],
    "ajax" : [

    ],
    "utils" : [
        {
            "category" : ["utils"],
            "title" : "getViewPortSize()",
            "description" : "Returns the height and width of the browser viewport.",
            "code" : "Spektral.getViewPortSize();",
            "params" : [],
            "returns" : "Object",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["event, utils"],
            "title" : "getKey()",
            "description" : "Converts the key code returned from a keyboard event into a string. ex. key code 38 returns \"UP\". Currently supports directional arrows and enter button.",
            "code" : "Spektral.getKey(code);",
            "params" : [
                {"code (required, expects: Number)" : "Key code returned from a keyboard event."}
            ],
            "returns" : "String",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["utils"],
            "title" : "isMatch()",
            "description" : "Compares to objects/elements to determine whether they are the same.",
            "code" : "Spektral.isMatch(itemA, itemB);",
            "params" : [
                {"itemA (required, expects: Anything)" : "The first item you want to compare."},
                {"itemB (required, expects: Anything)" : "The item you want to compare against itemA."}
            ],
            "returns" : "Boolean",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["utils"],
            "title" : "isHTMLElement()",
            "description" : "Used by getElement() to determine whether you are trying to find an element.",
            "code" : "Spektral.isHTMLElement(element);",
            "params" : [
                {"element (required, expects: String)" : "Only accepts the tag name of the element you wish to check for. If you want to check if pre-defined variable is an element, use isElement()."}
            ],
            "returns" : "Boolean",
            "dependencies" : "listElements()",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["utils"],
            "title" : "isHTMLID()",
            "description" : "Used by getElement() to determine whether you are trying to find an element by its id attribute.",
            "code" : "Spektral.isHTMLID(id);",
            "params" : [
                {"id (required, expects: String)" : "Only accepts the id of the element you wish to check for."}
            ],
            "returns" : "Boolean",
            "dependencies" : "listElements()",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["utils"],
            "title" : "isHTMLName()",
            "description" : "Used by getElement() to determine whether you are trying to find an element by its name attribute.",
            "code" : "Spektral.isHTMLName(name);",
            "params" : [
                {"name" : "Only accepts the name of the element you wish to check for."}
            ],
            "returns" : "Boolean",
            "dependencies" : "listElements()",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["utils"],
            "title" : "getPos()",
            "description" : "Returns an object containing the x, y, left, top, right, bottom properties of an element.",
            "code" : "Spektral.getPos(element);",
            "params" : [
                {"element (required, expects: Element)" : "The element you want get the position data from."}
            ],
            "returns" : "Object",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["utils, object"],
            "title" : "isObjectEmpty()",
            "description" : "Determines whether an object is empty and returns a boolean.",
            "code" : "Spektral.isObjectEmpty(obj);",
            "params" : [
                {"obj (required, expects: Object)" : "The object you wish to test."}
            ],
            "returns" : "Boolean",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["utils, object"],
            "title" : "getInfo()",
            "description" : "Returns the data within an object as a string.",
            "code" : "Spektral.getInfo(obj);",
            "params" : [
                {"obj (required, expects: Object)" : "The object you want to stringify."}
            ],
            "returns" : "String",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["utils"],
            "title" : "isElement()",
            "description" : "Checks if an object is possibly an HTML element.",
            "code" : "Spektral.isElement(possibleElement);",
            "params" : [
                {"possibleElement (required, expects: Anything)" : "The object you wish to check."}
            ],
            "returns" : "Boolean",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["utils"],
            "title" : "getElementIdentifiers()",
            "description" : "Gets an elements id attributes and returns them as an object. Will return the following properties: id, name, class, nodeName.",
            "code" : "Spektral.getElementIdentifiers(element);",
            "params" : [
                {"element (required, expects: Element" : "The element you want to get the identifiers from."}
            ],
            "returns" : "Object",
            "dependencies" : "convertCase()",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["utils"],
            "title" : "getType()",
            "description" : "Returns the type of an object.",
            "code" : "Spektral.getType(obj);",
            "params" : [
                {"obj (required, expects: Anything)" : "Usually object is either an element, variable, or object, but could be anything."}
            ],
            "returns" : "String",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["utils"],
            "title" : "getExtension()",
            "description" : "Gets the extension of a file.",
            "code" : "Spektral.getExtension(file);",
            "params" : [
                {"file (required, expects: String)" : "The full file name."}
            ],
            "returns" : "String",
            "dependencies" : "getType(), throwError()",
            "compatibility" : "Currently in testing."
        }

    ],
    "debug" : [
        {
            "category" : ["debugging"],
            "title" : "debug()",
            "description" : "Allows for logging in Spektral.js. When not called, using Spektral.log() will not log in console. Can be used outside of Spektral.js instead of console.log.",
            "code" : "Spektral.debug();",
            "params" : [],
            "returns" : "Nothing",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["debugging"],
            "title" : "about()",
            "description" : "Shows in the console which version of Spektral.js you are using, and what mode it is in. (debug or release)",
            "code" : "Spektral.about();",
            "params" : [],
            "returns" : "Nothing",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["debugging, DOM"],
            "title" : "listChildNodes()",
            "description" : "A debugging function. Logs the children of a node.",
            "code" : "Spektral.listChildNodes(parent);",
            "params" : [
                {"parent (required, expects: Element)" : "The element you wish to log the children of."}
            ],
            "returns" : "Nothing",
            "dependencies" : "log()",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["debugging"],
            "title" : "throwError()",
            "description" : "Throws an error if encountered.",
            "code" : "Spektral.throwError(message);",
            "params" : [
                {"message (required, expects: String)" : "The error message you wish to throw."}
            ],
            "returns" : "Error",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "category" : ["debugging"],
            "title" : "log()",
            "description" : "Logs debugging information in the console, if present. Primarily for internal use, can be used outside of Spektral.js.",
            "code" : "Spektral.log(message);",
            "params" : [
                {"message (required, expects: String)" : "The data you wish to log."}
            ],
            "returns" : "Nothing",
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        }
    ]
}