{
    "methods" : [
        {
            "title" : "debug()",
            "description" : "Allows for logging in Spektral.js. When not called, using Spektral.log() will not log in console. Can be used outside of Spektral.js instead of console.log.",
            "code" : "Spektral.debug();",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "global"
        },
        {
            "title" : "about()",
            "description" : "Shows in the console which version of Spektral.js you are using, and what mode it is in. (debug or release)",
            "code" : "Spektral.about();",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "global"
        },
        {
            "title" : "attachEventListener()",
            "description" : "Attaches an event listener to any element. If a mouse event, the hand (pointer) cursor is automatically applied.",
            "code" : "Spektral.attachEventListener(eventTarget, eventType, eventHandler);",
            "params" : [
                { "eventTarget (required, expects: Element or String)" : "Will use getElement() if string." },
                { "eventType (required, expects: String)" : "Any valid event type, ex. 'click', 'complete', 'load'. Also accepts custom event types." },
                { "eventHandler (required, expects: Function)" : "The function you wish to use to handle the event when it is fired." }
            ],
            "dependencies" : "getType(), getElement(), useHandCursor()",
            "compatibility" : "Currently in testing.",
            "category" : "events"
        },
        {
            "title" : "detachEventListener()",
            "description" : "Detaches an event listener from any element. If a mouse event, the hand cursor is automatically set back to default.",
            "code" : "Spektral.detachEventListener(eventTarget, eventType, eventHandler);",
            "params" : [
                { "eventTarget (required, expects: Element or String)" : "Will use getElement() if string." },
                { "eventType (required), expects: String)" : "Any valid event type, ex. 'click', 'complete', 'load'. Also accepts custom event types." },
                { "eventHandler (required, expects: Function)" : "The function that was assign to the event." }
            ],
            "dependencies" : "getType(), getElement(), useDefaultCursor()",
            "compatibility" : "Currently in testing.",
            "category" : "events"
        },
        {
            "title" : "getKey()",
            "description" : "Converts the key code returned from a keyboard event into a string. ex. key code 38 returns \"UP\". Currently supports directional arrows and enter button.",
            "code" : "Spektral.getKey(code);",
            "params" : [
                {"code (required, expects: Number)" : "Key code returned from a keyboard event."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "utils"
        },
        {
            "title" : "createEvent()",
            "description" : "Creates a custom event.",
            "code" : "Spektral.createEvent(eventName, details, bub, can);",
            "params" : [
                {"eventName (required, expects: String)" : "The name of the custom event you wish to create."},
                {"details (optional, expects: Object)" : "Allows you to pass custom properties to the event."},
                {"bub (optional, expects: Boolean, default: true)" : "Determines whether event can bubble."},
                {"can (optional, expects: Boolean, default: true)" : "Determines whether event can be canceled."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "events"
        },
        {
            "title" : "cancelEvent()",
            "description" : "Prevents default action triggered by event.",
            "code" : "Spektral.cancelEvent(evt);",
            "params" : [
                {"evt (required, expects: Returned event value)" : "The returned value event from the function assigned to the event."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "events"
        },
        {
            "title" : "cancelPropagation()",
            "description" : "Stops the event from bubbling up to parent elements.",
            "code" : "Spektral.stopPropagation(evt);",
            "params" : [
                {"evt (required, expects: Returned event value)" : "The returned value event from the function assigned to the event."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "events"
        },
        {
            "title" : "getTarget()",
            "description" : "Returns the target element that is attached to the triggered event.",
            "code" : "Spektral.getTarget(element);",
            "params" : [
                {"evt (required, expects: Returned event value)" : "The returned value event from the function assigned to the event."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "utils"
        },
        {
            "title" : "getTargetID()",
            "description" : "Returns the id of the element, if it has one.",
            "code" : "Spektral.getTargetID(element)",
            "params" : [
                {"element (required, expects: Element)" : "The element you wish to get the id from."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "utils"
        },
        {
            "title" : "useHandCursor()",
            "description" : "Sets cursor style to hand (pointer).",
            "code" : "Spektral.useHandCursor(element, cursorType);",
            "params" : [
                {"element (required, expects: Element)" : "The element you want to apply the hand cursor to."},
                {"cursorType (optional, expects: String. default: \"pointer\")" : "The type of hand cursor you want to apply. Besides \"pointer\" you may also use any valid cursor style you want."}
            ],
            "dependencies" : "getType(), appendStyle()",
            "compatibility" : "Currently in testing.",
            "category" : "style"
        },
        {
            "title" : "useDefaultCursor()",
            "description" : "Simply sets the cursor to the browsers default style.",
            "code" : "Spektral.useDefaultCursor(element);",
            "params" : [
                {"element (required, expects: Element)" : "The element you want to reset to the default cursor."}
            ],
            "dependencies" : "appendStyle()",
            "compatibility" : "Currently in testing.",
            "category" : "style"
        },
        {
            "title" : "getMousePos()",
            "description" : "Returns the mouses X/Y co-ordinates either with an element or window.",
            "code" : "Spektral.getMousePos(evt);",
            "params" : [
                {"evt (required, expects: Returned event value)" : "The returned value event from the function assigned to the event."}
            ],
            "dependencies" : "throwError(), getTarget(), getPos()",
            "compatibility" : "Currently in testing.",
            "category" : "utils"
        },
        {
            "title" : "getViewPortSize()",
            "description" : "Returns the height and width of the browser viewport.",
            "code" : "Spektral.getViewPortSize();",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "utils"
        },
        {
            "title" : "isMatch()",
            "description" : "Compares to objects/elements to determine whether they are the same.",
            "code" : "Spektral.isMatch(itemA, itemB);",
            "params" : [
                {"itemA (required, expects: Anything)" : "The first item you want to compare."},
                {"itemB (required, expects: Anything)" : "The item you want to compare against itemA."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "utils"
        },
        {
            "title" : "loadJSON()",
            "description" : "Loads an external JSON file.",
            "code" : "Spektral.loadJSON(source, callback, async);",
            "params" : [
                {"source (required, expects: String)" : "The location of the JSON file you wish to load."},
                {"callback (required, expects: Function)" : "The function that will receive the results after load."},
                {"async (optional, expects: Boolean, default: true)" : "You can set whether the file loads asynchronously or not."}
            ],
            "dependencies" : "getType(), loadFile(), throwError()",
            "compatibility" : "Currently in testing.",
            "category" : "ajax"
        },
        {
            "title" : "loadXML()",
            "description" : "Loads an external XML file.",
            "code" : "Spektral.loadXML(source, callback, async);",
            "params" : [
                {"source (required, expects: String)" : "The location of the XML file you wish to load."},
                {"callback (required, expects: Function)" : "The function that will receive the results after load."},
                {"async (optional, expects: Boolean, default: true)" : "You can set whether the file loads asynchronously or not."}
            ],
            "dependencies" : "getType(), loadFile(), throwError()",
            "compatibility" : "Currently in testing.",
            "category" : "ajax"
        },
        {
            "title" : "loadFile()",
            "description" : "Loads an external file using XMLHttpRequest/ActiveXObject.</br>Ex. TEXT, XML, JSON",
            "code" : "Spektral.loadFile(file, callback, async).",
            "params" : [
                {"source (required, expects: String)" : "The location of the file you wish to load."},
                {"callback (required, expects: Function)" : "The function that will receive the results after load."},
                {"async (optional, expects: Boolean, default: true)" : "You can set whether the file loads asynchronously or not."}
            ],
            "dependencies" : "getExtension(), getXHR(), throwError(), attachEventListener()",
            "compatibility" : "Currently in testing.",
            "category" : "ajax"
        },
        {
            "title" : "getXHR()",
            "description" : "Determines whether to use XMLHttpRequest or ActiveXObject when loading an external file, and returns the available xhr.",
            "code" : "Spektral.getXHR();",
            "params" : [],
            "dependencies" : "throwError()",
            "compatibility" : "Currently in testing.",
            "category" : "ajax"
        },
        {
            "title" : "xmlToJSON()",
            "description" : "Converts an XML structure to a JSON object for ease of use in JavaScript.",
            "code" : "Spektral.xmlToJSON(xml, node, index);",
            "params" : [
                {"xml (required, expects: XML object)" : "The loaded or embedded XML."},
                {"node (optional, default: firstChild.nodeName)" : "By default xmlToJSON() creates an object out of the entire file, but you can specify a particular parent node if needed."},
                {"index (optional, default: 0)" : "Can be used if you only want a specific child node."}
            ],
            "dependencies" : "getType(), createObject()",
            "compatibility" : "Currently in testing.",
            "category" : "ajax"
        },
        {
            "title" : "createObject()",
            "description" : "Takes a nodeList and converts it into an array of objects, returning the result.",
            "code" : "Spektral.createObject(list);",
            "params" : [
                {"list (required, expects: nodeList) " : "A nodeList of elements."}
            ],
            "dependencies" : "getType(), getTextContent(), createObject()",
            "compatibility" : "Currently in testing.",
            "category" : "objects"
        },
        {
            "title" : "query()",
            "description" : "Uses querySelectorAll to locate and return an element.",
            "code" : "Spektral.query(element)",
            "params" : [
                {"element (required, expects: String)" : "The element you wish to locate."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getElement()",
            "description" : "Returns an element from the DOM.",
            "code" : "Spektral.getElement(element, index);",
            "params" : [
                {"element (required, expects: String)" : "You can search for an element by it's id, class, or tag name. If multiple instances of the element are found (ex. elements share the same class or tag name), will return a nodeList of elements."},
                {"index (optional, expects: Number)" : "Use this to target an element that shares the same class or tag name with other elements. Ex. The third list item in an unordered list."}
            ],
            "dependencies" : "isHTMLElement(), isHTMLID(), isHTMLName(), query(), throwError(), getType(), log(), listArrayElements()",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "isHTMLElement()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "isHTMLID()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "isHTMLName()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "createNewElement()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "moveToAfter()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "moveToBefore()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "removeElement()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "clearAllChildren()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "setStyle()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getStyle()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "appendStyle()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "clearStyle()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getInlineStyle()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "convertToCamel()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "createSetAttribute()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "retrieveAttribute()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "destroyAttribute()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getTextContent()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getNodeAttributes()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "checkForAttribute()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "showElement()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "hideElement()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "toggleVisibility ()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "toggleDisplay()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "listNodeAttributes()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "roundNum()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getPos()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "isObjectEmpty()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "detectCharacter()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getInfo()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "stripBrackets()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "convertCase()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "splitString()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "stripWhiteSpace()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "listElements()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "listArrayElements()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "listChildNodes()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getChildNodes()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "isElement()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getElementIdentifiers()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getType()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "validateParams()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getExtension()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "throwError()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "log()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        }
    ]
}