{
    "methods" : [
        {
            "title" : "debug()",
            "description" : "Allows for logging in Spektral.js. When not called, using Spektral.log() will not log in console. Can be used outside of Spektral.js instead of console.log.",
            "code" : "Spektral.debug();",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "global"
        },
        {
            "title" : "about()",
            "description" : "Shows in the console which version of Spektral.js you are using, and what mode it is in. (debug or release)",
            "code" : "Spektral.about();",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "global"
        },
        {
            "title" : "attachEventListener()",
            "description" : "Attaches an event listener to any element. If a mouse event, the hand (pointer) cursor is automatically applied.",
            "code" : "Spektral.attachEventListener(eventTarget, eventType, eventHandler);",
            "params" : [
                { "eventTarget (required)" : "Accepts element or string (will use getElement() if string)." },
                { "eventType (required)" : "Accepts any valid event type, ex. 'click', 'complete', 'load'. Also accepts custom event types." },
                { "eventHandler (required)" : "The function you wish to use to handle the event when it is fired." }
            ],
            "dependencies" : "getType(), getElement(), useHandCursor()",
            "compatibility" : "Currently in testing.",
            "category" : "events"
        },
        {
            "title" : "detachEventListener()",
            "description" : "Detaches an event listener from any element. If a mouse event, the hand cursor is automatically set back to default.",
            "code" : "Spektral.detachEventListener(eventTarget, eventType, eventHandler);",
            "params" : [
                { "eventTarget (required)" : "Accepts element or string (will use getElement() if string)." },
                { "eventType (required)" : "Accepts any valid event type, ex. 'click', 'complete', 'load'. Also accepts custom event types." },
                { "eventHandler (required)" : "The function you wish to use to handle the event when it is fired." }
            ],
            "dependencies" : "getType(), getElement(), useDefaultCursor()",
            "compatibility" : "Currently in testing.",
            "category" : "events"
        },
        {
            "title" : "getKey()",
            "description" : "Converts the key code returned from a keyboard event into a string. ex. key code 38 returns \"UP\". Currently supports directional arrows and enter button.",
            "code" : "Spektral.getKey(code);",
            "params" : [
                {"code (required)" : "Key code returned from a keyboard event."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "utils"
        },
        {
            "title" : "createEvent()",
            "description" : "Creates a custom event.",
            "code" : "Spektral.createEvent(eventName, details, bub, can);",
            "params" : [
                {"eventName (required)" : "The name of the custom event you wish to create."},
                {"details (optional)" : "Allows you to pass custom properties to the event."},
                {"bub - (optional, default: true)" : "Determines whether event can bubble."},
                {"can - (optional, default: true)" : "Determines whether event can be canceled."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "events"
        },
        {
            "title" : "cancelEvent()",
            "description" : "Prevents default action triggered by event.",
            "code" : "Spektral.cancelEvent(evt);",
            "params" : [
                {"evt (required)" : "The returned value from the event."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "events"
        },
        {
            "title" : "cancelPropagation()",
            "description" : "Stops the event from bubbling up to parent elements.",
            "code" : "Spektral.stopPropagation(evt);",
            "params" : [
                {"evt (required)" : "The returned value from the event."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "events"
        },
        {
            "title" : "getTarget()",
            "description" : "Returns the target element that is attached to the triggered event.",
            "code" : "Spektral.getTarget(element);",
            "params" : [
                {"evt (required)" : "The returned value from the event."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "utils"
        },
        {
            "title" : "getTargetID()",
            "description" : "Returns the id of the element, if it has one.",
            "code" : "Spektral.getTargetID(element)",
            "params" : [
                {"element (required)" : "The element you wish to get the id from."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "utils"
        },
        {
            "title" : "useHandCursor()",
            "description" : "Sets cursor style to hand (pointer).",
            "code" : "Spektral.useHandCursor(element, cursorType);",
            "params" : [
                {"element (required)" : "The element you want to apply the hand cursor to."},
                {"cursorType (optional, default: pointer)" : "The type of hand cursor you want to apply. Besides \"pointer\" you may also use any valid cursor style you want."}
            ],
            "dependencies" : "getType(), appendStyle()",
            "compatibility" : "Currently in testing.",
            "category" : "style"
        },
        {
            "title" : "useDefaultCursor()",
            "description" : "Simply sets the cursor to the browsers default style.",
            "code" : "Spektral.useDefaultCursor(element);",
            "params" : [
                {"element (required)" : "The element you want to reset to the default cursor."}
            ],
            "dependencies" : "appendStyle()",
            "compatibility" : "Currently in testing.",
            "category" : "style"
        },
        {
            "title" : "getMousePos()",
            "description" : "Returns the mouses X/Y co-ordinates either with an element or window.",
            "code" : "Spektral.getMousePos(evt);",
            "params" : [
                {"evt (required)" : "The returned value from the event."}
            ],
            "dependencies" : "throwError(), getTarget(), getPos()",
            "compatibility" : "Currently in testing.",
            "category" : "utils"
        },
        {
            "title" : "getViewPortSize()",
            "description" : "Returns the height and width of the browser viewport.",
            "code" : "Spektral.getViewPortSize();",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "utils"
        },
        {
            "title" : "isMatch()",
            "description" : "Compares to objects/elements to determine whether they are the same.",
            "code" : "Spektral.isMatch(itemA, itemB",
            "params" : [
                {"itemA (required)" : "The first item you want to compare."},
                {"itemB (required)" : "The item you want to compare against itemA."}
            ],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "utils"
        },
        {
            "title" : "loadJSON()",
            "description" : "Loads an external JSON file.",
            "code" : "Spektral.loadJSON(source, callback, async);",
            "params" : [
                {"source (required)" : "The location of the JSON file you wish to load."},
                {"callback (required)" : "The function that will receive the results after load."},
                {"async (optional, default: true)" : "You can set whether the file loads asynchronously or not."}
            ],
            "dependencies" : "getType(), loadFile(), throwError()",
            "compatibility" : "Currently in testing.",
            "category" : "ajax"
        },
        {
            "title" : "loadXML()",
            "description" : "Loads an external XML file.",
            "code" : "Spektral.loadXML(source, callback, async);",
            "params" : [
                {"source (required)" : "The location of the XML file you wish to load."},
                {"callback (required)" : "The function that will receive the results after load."},
                {"async (optional, default: true)" : "You can set whether the file loads asynchronously or not."}
            ],
            "dependencies" : "getType(), loadFile(), throwError()",
            "compatibility" : "Currently in testing.",
            "category" : "ajax"
        },
        {
            "title" : "loadFile()",
            "description" : "Loads an external file using XMLHttpRequest/ActiveXObject. Ex. .txt, .xml, .json",
            "code" : "Spektral.loadFile(file, callback, async).",
            "params" : [
                {"source (required)" : "The location of the file you wish to load."},
                {"callback (required)" : "The function that will receive the results after load."},
                {"async (optional, default: true)" : "You can set whether the file loads asynchronously or not."}
            ],
            "dependencies" : "getExtension(), getXHR(), throwError(), attachEventListener()",
            "compatibility" : "Currently in testing.",
            "category" : "ajax"
        },
        {
            "title" : "getXHR()",
            "description" : "Determines whether to use XMLHttpRequest or ActiveXObject when loading an external file.",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing.",
            "category" : "ajax"
        },
        {
            "title" : "xmlToJSON()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "createObject()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "query()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getElement()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "isHTMLElement()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "isHTMLID()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "isHTMLName()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "createNewElement()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "moveToAfter()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "moveToBefore()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "removeElement()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "clearAllChildren()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "setStyle()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getStyle()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "appendStyle()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "clearStyle()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getInlineStyle()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "convertToCamel()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "createSetAttribute()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "retrieveAttribute()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "destroyAttribute()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getTextContent()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getNodeAttributes()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "checkForAttribute()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "showElement()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "hideElement()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "toggleVisibility ()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "toggleDisplay()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "listNodeAttributes()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "roundNum()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getPos()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "isObjectEmpty()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "detectCharacter()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getInfo()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "stripBrackets()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "convertCase()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "splitString()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "stripWhiteSpace()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "listElements()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "listArrayElements()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "listChildNodes()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getChildNodes()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "isElement()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getElementIdentifiers()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getType()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "validateParams()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "getExtension()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "throwError()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        },
        {
            "title" : "log()",
            "description" : "",
            "code" : "",
            "params" : [],
            "dependencies" : "None",
            "compatibility" : "Currently in testing."
        }
    ]
}